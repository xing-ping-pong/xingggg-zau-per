# E-Commerce Backend Documentation

## Table of Contents
1. [Project Overview](#project-overview)
2. [Architecture](#architecture)
3. [Database Design](#database-design)
4. [Security Implementation](#security-implementation)
5. [Authentication System](#authentication-system)
6. [API Endpoints](#api-endpoints)
7. [File Structure](#file-structure)
8. [Configuration](#configuration)
9. [Best Practices](#best-practices)
10. [Deployment Guide](#deployment-guide)

## Project Overview

This is a PHP-based e-commerce backend system featuring:
- User authentication and authorization
- Product catalog management
- Shopping cart functionality
- Order processing
- Admin panel
- Contact system
- Wishlist management
- Blog system

## Architecture

### Technology Stack
- **Backend**: PHP 7.4+
- **Database**: MySQL 5.7+
- **Session Management**: PHP Sessions
- **Frontend Integration**: jQuery/AJAX
- **Security**: CSRF Protection, Password Hashing, Input Sanitization

### Design Patterns
- **MVC-like Structure**: Separation of concerns with dedicated files for different functionalities
- **Database Abstraction**: PDO for secure database operations
- **Session-based Authentication**: Secure session management
- **AJAX Architecture**: Asynchronous frontend-backend communication

## Database Design

### Core Tables

#### Users Table
```sql
CREATE TABLE users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    is_admin BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

#### Products Table
```sql
CREATE TABLE products (
    product_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    price DECIMAL(10,2) NOT NULL,
    image_url VARCHAR(500),
    category_id INT,
    stock_quantity INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (category_id) REFERENCES categories(category_id)
);
```

#### Categories Table
```sql
CREATE TABLE categories (
    category_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    parent_category_id INT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (parent_category_id) REFERENCES categories(category_id)
);
```

#### Cart Table
```sql
CREATE TABLE cart (
    cart_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT DEFAULT 1,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id),
    UNIQUE KEY unique_user_product (user_id, product_id)
);
```

#### Orders Table
```sql
CREATE TABLE orders (
    order_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    total_amount DECIMAL(10,2) NOT NULL,
    shipping_address TEXT NOT NULL,
    payment_method VARCHAR(50) NOT NULL,
    status ENUM('pending', 'processing', 'shipped', 'delivered', 'cancelled') DEFAULT 'pending',
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);
```

#### Order Items Table
```sql
CREATE TABLE order_items (
    item_id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    price_at_purchase DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES orders(order_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);
```

#### Wishlist Table
```sql
CREATE TABLE wishlist (
    wishlist_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    product_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id),
    UNIQUE KEY unique_user_product (user_id, product_id)
);
```

#### Contact Messages Table
```sql
CREATE TABLE contact_messages (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    subject VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    user_id INT NULL,
    admin_reply TEXT NULL,
    reply_date DATETIME NULL,
    status ENUM('new', 'read', 'replied') DEFAULT 'new',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);
```

#### Blog Posts Table
```sql
CREATE TABLE blog_posts (
    post_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    featured_image VARCHAR(500),
    publish_date TIMESTAMP NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
```

## Security Implementation

### 1. Database Connection Security
```php
// connection.php
$options = [
    PDO::ATTR_ERRMODE            => PDO::ERRMODE_EXCEPTION,
    PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
    PDO::ATTR_EMULATE_PREPARES   => false, // Prevents SQL injection
    PDO::ATTR_PERSISTENT         => false, // Avoids persistent connections
    PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES $charset COLLATE utf8mb4_unicode_ci",
];
```

### 2. Session Security
```php
// Secure session configuration
ini_set('session.cookie_httponly', 1);
ini_set('session.cookie_secure', isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? 1 : 0);
ini_set('session.use_strict_mode', 1);
```

### 3. CSRF Protection
```php
// csrf_protection.php
function generateCSRFToken() {
    if (!isset($_SESSION['csrf_token'])) {
        $_SESSION['csrf_token'] = bin2hex(random_bytes(32));
    }
    return $_SESSION['csrf_token'];
}

function verifyCSRFToken($token) {
    if (!isset($_SESSION['csrf_token'])) {
        return false;
    }
    return hash_equals($_SESSION['csrf_token'], $token);
}
```

### 4. Input Sanitization
```php
// Input sanitization functions
function sanitize_input($data) {
    $data = trim($data);
    $data = stripslashes($data);
    $data = htmlspecialchars($data);
    return $data;
}

// Usage in forms
$username = filter_input(INPUT_POST, 'username', FILTER_SANITIZE_STRING);
$email = filter_input(INPUT_POST, 'email', FILTER_SANITIZE_EMAIL);
```

### 5. Password Security
```php
// Password hashing
$password = password_hash($_POST['password'], PASSWORD_DEFAULT);

// Password verification
if($user && password_verify($password, $user['password_hash'])) {
    // Login successful
}
```

## Authentication System

### User Registration
```php
// auth.php - Registration flow
if(isset($_POST['register'])) {
    $username = filter_input(INPUT_POST, 'username', FILTER_SANITIZE_STRING);
    $email = filter_input(INPUT_POST, 'email', FILTER_SANITIZE_EMAIL);
    $password = password_hash($_POST['password'], PASSWORD_DEFAULT);

    try {
        $stmt = $pdo->prepare("INSERT INTO users (username, email, password_hash) VALUES (?, ?, ?)");
        $stmt->execute([$username, $email, $password]);
        $_SESSION['success'] = "Registration successful! Please login.";
        header("Location: login.php");
    } catch(PDOException $e) {
        $_SESSION['error'] = "Registration failed: " . $e->getMessage();
    }
}
```

### User Login
```php
// auth.php - Login flow
if(isset($_POST['login'])) {
    $username = filter_input(INPUT_POST, 'username', FILTER_SANITIZE_STRING);
    $password = $_POST['password'];

    $stmt = $pdo->prepare("SELECT * FROM users WHERE username = ?");
    $stmt->execute([$username]);
    $user = $stmt->fetch();

    if($user && password_verify($password, $user['password_hash'])) {
        $_SESSION['user_id'] = $user['user_id'];
        $_SESSION['username'] = $user['username'];
        $_SESSION['is_admin'] = $user['is_admin'];
        header("Location: index.php");
    } else {
        $_SESSION['error'] = "Invalid username or password";
    }
}
```

### Admin Authorization
```php
// Admin check
if (!isset($_SESSION['is_admin']) || !$_SESSION['is_admin']) {
    header("Location: index.php");
    exit();
}
```

## API Endpoints

### 1. Cart Management
**File**: `add_to_cart.php`
```php
// Add product to cart
$stmt = $pdo->prepare("SELECT * FROM cart WHERE user_id = ? AND product_id = ?");
$stmt->execute([$user_id, $product_id]);
$existing = $stmt->fetch();

if ($existing) {
    $stmt = $pdo->prepare("UPDATE cart SET quantity = quantity + 1 WHERE user_id = ? AND product_id = ?");
    $stmt->execute([$user_id, $product_id]);
} else {
    $stmt = $pdo->prepare("INSERT INTO cart (user_id, product_id, quantity) VALUES (?, ?, ?)");
    $stmt->execute([$user_id, $product_id, $quantity]);
}
```

**File**: `update_cart.php`
```php
// Update cart quantities
if ($action === 'increase') {
    $stmt = $pdo->prepare("UPDATE cart SET quantity = quantity + 1 WHERE user_id = ? AND product_id = ?");
    $stmt->execute([$user_id, $product_id]);
} elseif ($action === 'decrease') {
    // Only decrease if quantity > 1
    $stmt = $pdo->prepare("SELECT quantity FROM cart WHERE user_id = ? AND product_id = ?");
    $stmt->execute([$user_id, $product_id]);
    $row = $stmt->fetch();
    if ($row && $row['quantity'] > 1) {
        $stmt = $pdo->prepare("UPDATE cart SET quantity = quantity - 1 WHERE user_id = ? AND product_id = ?");
        $stmt->execute([$user_id, $product_id]);
    }
} elseif ($action === 'remove') {
    $stmt = $pdo->prepare("DELETE FROM cart WHERE user_id = ? AND product_id = ?");
    $stmt->execute([$user_id, $product_id]);
}
```

### 2. Wishlist Management
**File**: `update_wishlist.php`
```php
// AJAX endpoint for wishlist operations
header('Content-Type: application/json');

if ($action === 'add') {
    $stmt = $pdo->prepare("INSERT IGNORE INTO wishlist (user_id, product_id) VALUES (?, ?)");
    $stmt->execute([$user_id, $product_id]);
    $response['success'] = true;
    $response['message'] = 'Added to wishlist!';
} elseif ($action === 'remove') {
    $stmt = $pdo->prepare("DELETE FROM wishlist WHERE user_id = ? AND product_id = ?");
    $stmt->execute([$user_id, $product_id]);
    $response['success'] = true;
    $response['message'] = 'Removed from wishlist!';
}
```

### 3. Order Processing
**File**: `orders.php`
```php
function createOrder($user_id, $total, $address, $payment_method, $cart_items) {
    global $pdo;
    try {
        $pdo->beginTransaction();
        
        // Create order
        $stmt = $pdo->prepare("INSERT INTO orders (user_id, total_amount, shipping_address, status, payment_method, order_date) 
                              VALUES (?, ?, ?, 'pending', ?, NOW())");
        $stmt->execute([$user_id, $total, $address, $payment_method]);
        $order_id = $pdo->lastInsertId();

        // Add order items
        foreach($cart_items as $item) {
            $stmt = $pdo->prepare("INSERT INTO order_items 
                                  (order_id, product_id, quantity, price_at_purchase) 
                                  VALUES (?, ?, ?, ?)");
            $stmt->execute([$order_id, $item['product_id'], $item['quantity'], $item['price']]);
        }

        // Clear cart
        $stmt = $pdo->prepare("DELETE FROM cart WHERE user_id = ?");
        $stmt->execute([$user_id]);

        $pdo->commit();
        return $order_id;
    } catch(Exception $e) {
        $pdo->rollBack();
        throw $e;
    }
}
```

### 4. Contact System
**File**: `contact.php`
```php
// Contact form processing with CSRF protection
if (isset($_POST['submit']) && validateCSRFFromPost()) {
    $name = sanitize_input($_POST['name']);
    $email = sanitize_input($_POST['email']);
    $message = sanitize_input($_POST['message']);
    
    $stmt = $pdo->prepare("INSERT INTO contact_messages (name, email, message, user_id) VALUES (?, ?, ?, ?)");
    $stmt->execute([$name, $email, $message, $user_id]);
}
```

### 5. AJAX Endpoints

#### Get Wishlist Count
**File**: `get_wishlist_count.php`
```php
header('Content-Type: application/json');
$response = ['success' => false, 'count' => 0];

if (isset($_SESSION['user_id'])) {
    $stmt = $pdo->prepare("SELECT COUNT(*) FROM wishlist WHERE user_id = ?");
    $stmt->execute([$_SESSION['user_id']]);
    $count = $stmt->fetchColumn();
    
    $response['success'] = true;
    $response['count'] = (int)$count;
}

echo json_encode($response);
```

## File Structure

```
project/
├── connection.php              # Database connection and security
├── csrf_protection.php         # CSRF protection utilities
├── auth.php                    # Authentication logic
├── admin/
│   ├── check_admin.php         # Admin verification
│   ├── debug.php               # Debug utilities
│   ├── delete_user.php         # User management
│   ├── messages.php            # Message management
│   └── update_status.php       # Status updates
├── add_to_cart.php             # Add products to cart
├── add_review.php              # Product reviews
├── cart.php                    # Shopping cart page
├── checkout.php                # Checkout process
├── contact.php                 # Contact form handling
├── get_wishlist_count.php      # AJAX wishlist count
├── login.php                   # Login page
├── logout.php                  # Logout functionality
├── newsletter.php              # Newsletter subscription
├── order_details.php           # Order details view
├── order_history.php           # Order history
├── orders.php                  # Order processing functions
├── product.php                 # Product details
├── products.php                # Product listing
├── profile.php                 # User profile
├── register.php                # Registration page
├── update_cart.php             # Cart quantity updates
├── update_wishlist.php         # Wishlist management
├── wishlist.php                # Wishlist page
└── admin_panel.php             # Admin dashboard
```

## Configuration

### Database Configuration
```php
// connection.php
$host = 'localhost';
$db   = 'your_database_name';
$user = 'your_username';
$pass = 'your_password';
$charset = 'utf8mb4';

$dsn = "mysql:host=$host;dbname=$db;charset=$charset";
```

### Environment Variables (Recommended)
Create a `.env` file for sensitive configuration:
```env
DB_HOST=localhost
DB_NAME=your_database_name
DB_USER=your_username
DB_PASS=your_password
```

### Error Handling
```php
// Enable error reporting for development
error_reporting(E_ALL);
ini_set('display_errors', 1);

// Log errors in production
ini_set('log_errors', 1);
ini_set('error_log', '/path/to/error.log');
```

## Best Practices

### 1. Database Security
- Always use prepared statements
- Never use direct string concatenation in SQL
- Validate and sanitize all inputs
- Use transactions for multi-step operations

### 2. Session Management
- Regenerate session ID after login
- Set secure session cookie options
- Implement session timeout
- Destroy sessions on logout

### 3. Password Security
- Use `password_hash()` with `PASSWORD_DEFAULT`
- Verify passwords with `password_verify()`
- Implement password strength requirements
- Consider implementing password reset functionality

### 4. Input Validation
```php
// Validate email
if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    throw new Exception('Invalid email format');
}

// Validate integer
$id = filter_var($id, FILTER_VALIDATE_INT);
if ($id === false) {
    throw new Exception('Invalid ID');
}
```

### 5. Error Handling
```php
try {
    // Database operations
    $stmt = $pdo->prepare("SELECT * FROM users WHERE id = ?");
    $stmt->execute([$user_id]);
    $user = $stmt->fetch();
} catch (PDOException $e) {
    error_log("Database error: " . $e->getMessage());
    // Handle error gracefully
}
```

### 6. AJAX Response Standards
```php
header('Content-Type: application/json');

$response = [
    'success' => false,
    'message' => '',
    'data' => null
];

try {
    // Process request
    $response['success'] = true;
    $response['message'] = 'Operation successful';
    $response['data'] = $result;
} catch (Exception $e) {
    $response['message'] = $e->getMessage();
}

echo json_encode($response);
```

## Deployment Guide

### 1. Server Requirements
- PHP 7.4 or higher
- MySQL 5.7 or higher
- Apache/Nginx web server
- SSL certificate (recommended)

### 2. Database Setup
```sql
-- Create database
CREATE DATABASE your_database_name CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

-- Create user (optional)
CREATE USER 'your_username'@'localhost' IDENTIFIED BY 'your_password';
GRANT ALL PRIVILEGES ON your_database_name.* TO 'your_username'@'localhost';
FLUSH PRIVILEGES;
```

### 3. File Permissions
```bash
# Set appropriate permissions
chmod 644 *.php
chmod 755 admin/
chmod 666 php_errors.log
```

### 4. Security Checklist
- [ ] Change default database credentials
- [ ] Enable HTTPS
- [ ] Set secure session configuration
- [ ] Disable error display in production
- [ ] Implement rate limiting
- [ ] Regular security updates

### 5. Performance Optimization
- Enable PHP OPcache
- Use database indexing
- Implement caching where appropriate
- Optimize images and assets
- Use CDN for static content

## Troubleshooting

### Common Issues

1. **Database Connection Errors**
   - Check credentials in `connection.php`
   - Verify MySQL service is running
   - Check firewall settings

2. **Session Issues**
   - Verify session configuration
   - Check file permissions
   - Ensure session directory is writable

3. **CSRF Token Errors**
   - Ensure `csrf_protection.php` is included
   - Check token generation and verification
   - Verify form includes CSRF token

4. **AJAX Errors**
   - Check JavaScript console for errors
   - Verify endpoint URLs
   - Ensure proper content-type headers

### Debug Utilities
```php
// admin/debug.php
function writeDebug($message) {
    $debugFile = __DIR__ . '/debug.log';
    $timestamp = date('Y-m-d H:i:s');
    $logMessage = "[$timestamp] $message\n";
    file_put_contents($debugFile, $logMessage, FILE_APPEND);
}
```

## Conclusion

This backend system provides a solid foundation for e-commerce applications with:
- Secure authentication and authorization
- Robust database design
- Comprehensive API endpoints
- Security best practices
- Scalable architecture

The modular design allows for easy customization and extension for different project requirements. Always ensure proper testing and security auditing before deploying to production environments.

---

**Last Updated**: [Current Date]
**Version**: 1.0
**Author**: J.
